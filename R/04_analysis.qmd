---
title: "Analyse data"
format: html
editor: source
author: authors
---

### Source functions

```{r}
source("../R/99_proj_func.R")
```

### Library

```{r}
#| eval: true
#| echo: true
#| warning: false

library("tidyverse")
library("Racmacs")
library("viridis")
library("ggrepel")
library("svglite")
library("ggforce")
library("dbscan")
library("RColorBrewer")



```

### Loading

```{r}
file_path <- file.path(getwd(), "../data/map.ace")

map <- read.acmap(
  file_path,
  optimization_number = NULL,
  sort_optimizations = FALSE,
  align_optimizations = FALSE
)

attr_table_ag <- read_tsv(file = "../data/attr_table_ag.tsv")
attr_table_sr <- read_tsv(file = "../data/attr_table_sr.tsv")
table_info <- read_tsv(file = "../data/table_info.tsv")


```


### Extracting information and creating colors

```{r}

ag_coords <- agCoords(map)  # Antigen coordinates
sr_coords <- srCoords(map)  # Serum coordinates

############################
# Combine ag and sr data   #
############################
ag_df <- as.data.frame(ag_coords) |>
  mutate(antigen = rownames(ag_coords),
         type = 'AG',
         antigenic_group = attr_table_ag[["Antigenic group"]],
         serum_vaccine_homolog = attr_table_ag[["Serum vaccine homolog"]])

clustering_result <- dbscan::dbscan(ag_df[, 
                                       c("V1", "V2")], 
                                    eps = 0.5, # the maximum distance between two samples for one to be considered in the neighborhood
                                    minPts = 2) # number of samples in a neighborhood for a point to be considered a core point



ag_df <- ag_df |> 
  mutate(cluster = clustering_result$cluster)


sr_df <- as.data.frame(sr_coords) |>
  mutate(serum = rownames(sr_coords),
         type = 'SR')

dd <- bind_rows(ag_df, 
                sr_df) |> 
  mutate(
    serum_group = attr_table_sr$"Serum exposure antigen"[match(dd$serum, 
                                                  attr_table_sr$"sera_name_with_DPI")]
    )

############################
#     Unique colouring     #
############################
unique_AG <- dd |> 
  filter(type == "AG") |> 
  pull(antigen) |> 
  unique()

colors_for_AG <- setNames(
  viridis::viridis(
    length(unique_AG), 
    option = "turbo"), 
  unique_AG)

colors_for_AG <- sapply(
  colors_for_AG, 
  adjustcolor, 
  alpha.f = 0.8)

dd <- dd |> mutate(color = colors_for_AG[antigen])

unique_antigenic_groups <- unique(dd$antigenic_group)
# Find antigenic groups not already in colors_for_AG
new_groups <- unique_antigenic_groups[!unique_antigenic_groups %in% names(colors_for_AG)]

# If there are new groups, generate colors for them
if(length(new_groups) > 0) {
  new_colors <- viridis::viridis(length(new_groups),option = "turbo")
  # Add these new colors to the existing colors_for_AG
  colors_for_AG <- c(colors_for_AG, setNames(new_colors, new_groups))
}


unique_serum_exposures <- unique(attr_table_sr$"Serum exposure antigen")
# ag_df and antigenic_group to color
homolog_colors <- dd |> 
  filter(type == "AG") |> 
  select(serum_vaccine_homolog, 
         color) |>
  distinct() |>
  # Ensure there's a row for each antigenic group mentioned in attr_table_sr
  filter(serum_vaccine_homolog %in% unique_serum_exposures)

colors_for_SR <- setNames(homolog_colors$color, 
                          homolog_colors$serum_vaccine_homolog)

num_clusters <- max(ag_df$cluster[ag_df$cluster > 0])
if(num_clusters <= 8) {
  cluster_colors <- brewer.pal(num_clusters, "Dark2")
} else {
  # More than 8 clusters
  cluster_colors <- rep(brewer.pal(8, "Dark2"), # repeating palette
                        length.out = num_clusters)
}

names(cluster_colors) <- as.character(seq_len(num_clusters))

combined_colors <- c(cluster_colors, colors_for_AG, colors_for_SR)



```

Antigenic Mapping
```{r}
############################
# Generating Antigenic Map #
############################
base_map <- ggplot(dd) +
  geom_point(data = filter(dd, type == "SR"), 
             aes(x = V1, y = V2, shape = type, color = serum_group), 
             size = 2, shape = 0, stroke = 0.4, alpha = 0.7) +
  scale_fill_manual(values = combined_colors) +
  scale_color_manual(values = combined_colors) +
  theme_minimal() +
  labs(title = paste0("Antigenic map of ", table_info |> pull(virus_type), " variants"),
       subtitle = paste0("Inhibition titers for ", table_info |> pull(viral_protein), 
                         " analyzed via ", table_info |> pull(assay_type)),
       x = "", y = "", color = "Serum group",
       caption = "Wilks et al., 2023") +
  theme(axis.text.x = element_blank(), 
        axis.text.y = element_blank(),
        plot.background = element_rect(fill = "white"), 
        panel.background = element_rect(fill = "white"), 
        panel.grid.minor = element_blank(), 
        plot.caption = element_text(hjust = 1, 
                                    vjust = 1, 
                                    margin = margin(t = 1, 
                                                    unit = "pt"), 
                                    size = 12, 
                                    color = "darkgrey", 
                                    face = "italic"),
        panel.border = element_rect(colour = "azure4", 
                                    fill = NA, 
                                    size = 1.5), 
        plot.margin = margin(t = 20, 
                             r = 20, 
                             b = 5, 
                             l = 10, 
                             unit = "pt"),
        plot.subtitle = element_text(margin = margin(t = 2, 
                                                     b = 10, 
                                                     l = 10,
                                                     unit = "pt")),
        plot.title = element_text(face = "bold",
                                  margin = margin(l = 10, 
                                                    unit = "pt")), 
        plot.caption.position = "plot", 
        plot.title.position = "plot",
        legend.position = "right", 
        legend.spacing.y = unit(-7, 
                                "pt"))
```


```{r}
##########
# Legend #
##########
ag_map_1 <- base_map +
  geom_point(data = filter(dd, type == "AG"), 
             aes(x = V1, y = V2, fill = antigen), 
             shape = 21, size = 6, color = "black") +
  labs(fill = "Antigen") + 
  guides(fill = guide_legend(override.aes = list(size = 5)), 
         shape = "none", size = "none",
         color = guide_legend(override.aes = list(size = 3, stroke = 0.8)))
  

```



Label plot

```{r}
##########
# Labels #
##########
ag_map_2 <- base_map +
  geom_point(data = filter(dd, type == "AG"), 
             aes(x = V1, y = V2, fill = antigen), 
             shape = 21, size = 6, color = "black") +
  coord_cartesian(clip = "off") +
  
  geom_text_repel(aes(x = V1, 
                      y = V2, 
                      label = antigen),
                  size = 3, 
                  box.padding = unit(0.4, 
                                     "lines"), 
                  point.padding = unit(1.05, "lines"),
                  segment.linetype = 1, 
                  min.segment.length = 0.4, 
                  arrow = arrow(length = unit(0.015, "npc")),
                  segment.curvature = 0, 
                  segment.alpha = 0.7, 
                  force_pull = 1.0, 
                  force = 1.0, 
                  max.iter = 10000,
                  xlim = c(-NA, NA), 
                  ylim = c(-NA, NA), 
                  bg.color = "white", 
                  bg.r = 0.10) +
  labs(fill = "Antigen") + 
  guides(fill = FALSE, 
         color = guide_legend(override.aes = list(size = 3, stroke = 0.8)))
```

## Plain plot

```{r}
##########
# Plain  #
##########
ag_map_3 <- base_map +
  geom_point(data = filter(dd, type == "AG"), 
             aes(x = V1, y = V2, fill = antigen), 
             shape = 21, size = 6, color = "black") +
  labs(fill = "Antigen") + 
  guides(fill = guide_legend(override.aes = list(size = 5)), shape = "none", size = "none",
         color = guide_legend(override.aes = list(size = 3, stroke = 0.8))) +
  theme(legend.position = "none")
```

```{r}
##########
# Grouped#
##########
ag_map_4 <- base_map + 
  geom_point(data = filter(dd, type == "AG"), 
             aes(x = V1, y = V2, fill = antigenic_group), 
             shape = 21, size = 6, color = "black") +
  labs(fill = "Antigenic group") + 
  guides(fill = guide_legend(override.aes = list(size = 5)), shape = "none", size = "none",
         color = guide_legend(override.aes = list(size = 3, stroke = 0.8)))

ag_counts <- dd |>
  filter(type == "AG") |>
  count(antigenic_group)

# Filter for antigenic_groups appearing more than once
ag_groups_with_multiple_entries <- ag_counts |>
  filter(n > 1) |>
  pull(antigenic_group)

# Create a subset of dd for these groups
dd_multiple_entries <- dd |>
  filter(antigenic_group %in% ag_groups_with_multiple_entries)

dd_cluster <- dd |>
  filter(type == "AG") |>
  filter(cluster != 0)

ag_map_5 <- base_map +
  geom_point(data = filter(dd, type == "AG"), 
             aes(x = V1, y = V2, fill = antigenic_group), 
             shape = 21, size = 6, color = "black") +
  coord_cartesian(clip = "off") +
  
  geom_text_repel(data = dd_multiple_entries,
                  aes(x = V1, 
                      y = V2, 
                      label = antigen),
                  size = 3, 
                  box.padding = unit(0.35, "lines"), 
                  point.padding = unit(0.8, "lines"),
                  segment.linetype = 1, 
                  min.segment.length = 0.4, 
                  arrow = arrow(length = unit(0.015, "npc")),
                  segment.curvature = 0, 
                  segment.alpha = 0.7, 
                  force_pull = 1.0, 
                  force = 1.0, 
                  max.iter = 10000,
                  xlim = c(-NA, NA), 
                  ylim = c(-NA, NA), 
                  bg.color = "white", 
                  bg.r = 0.10) +
  labs(fill = "Antigenic group") + 
  
  guides(fill = guide_legend(override.aes = list(size = 5)), 
         color = guide_legend(override.aes = list(size = 3, stroke = 0.8)))

```


```{r}
##############
# Clustering #
##############
ag_map_6 <- base_map + 
  geom_mark_ellipse(
    data = filter(dd, cluster > 0),  
    aes(x = V1, y = V2, group = factor(cluster), color = factor(cluster)),
    fill = NA,  # No fill for ellipses
    expand = unit(0.05, 'npc'), alpha = 1.0, size = 1.0, linetype = 3,
    show.legend = FALSE
  ) +
  geom_point(
    data = filter(dd, type == "AG"), 
    aes(x = V1, y = V2, fill = antigen),  # Fill based on antigenic group
    shape = 21, size = 6, color = "black"
  ) +
  labs(fill = "Antigen") + 
  guides(fill = guide_legend(override.aes = list(size = 5)), 
         color = guide_legend(override.aes = list(size = 2))) +
  scale_color_manual(values = combined_colors,
                     breaks = unique_serum_exposures, # Specify which legends to display
                     labels = unique_serum_exposures)

ag_map_7 <- base_map + 
  geom_mark_ellipse(
    data = filter(dd, cluster > 0),  
    aes(x = V1, y = V2, group = factor(cluster), color = factor(cluster)),
    fill = NA,  # No fill for ellipses
    expand = unit(0.05, 'npc'), alpha = 1.0, size = 1.0, linetype = 3,
    show.legend = FALSE
  ) +
  geom_point(
    data = filter(dd, type == "AG"), 
    aes(x = V1, y = V2, fill = antigenic_group),  # Fill based on antigenic group
    shape = 21, size = 6, color = "black"
  ) +
  labs(fill = "Antigenic group") + 
  guides(fill = guide_legend(override.aes = list(size = 5)), 
         color = guide_legend(override.aes = list(size = 2))) +
  scale_color_manual(values = combined_colors,
                     breaks = unique_serum_exposures, # Specify which legends to display
                     labels = unique_serum_exposures)


ag_map_8 <- base_map + 
  geom_mark_ellipse(
    data = filter(dd, cluster > 0),  
    aes(x = V1, y = V2, group = factor(cluster), color = factor(cluster)),
    fill = NA,  # No fill for ellipses
    expand = unit(0.05, 'npc'), alpha = 1.0, size = 1.0, linetype = 3,
    show.legend = FALSE
  ) +
  geom_point(
    data = filter(dd, type == "AG"), 
    aes(x = V1, y = V2, fill = antigenic_group),  # Fill based on antigenic group
    shape = 21, size = 6, color = "black"
  ) +
  coord_cartesian(clip = "on") +
  geom_text_repel(data = dd_cluster,
                  aes(x = V1, 
                      y = V2, 
                      label = antigen),
                  size = 3, 
                  box.padding = unit(0.35, "lines"), 
                  point.padding = unit(0.8, "lines"),
                  segment.linetype = 1, 
                  min.segment.length = 0.4, 
                  arrow = arrow(length = unit(0.015, "npc")),
                  segment.curvature = 0, 
                  segment.alpha = 0.7, 
                  force_pull = 1.0, 
                  force = 1.0, 
                  max.iter = 10000,
                  xlim = c(-NA, NA), 
                  ylim = c(-NA, NA), 
                  bg.color = "white", 
                  bg.r = 0.10) +
  labs(fill = "Antigenic group") + 
  guides(fill = guide_legend(override.aes = list(size = 5)), 
         color = guide_legend(override.aes = list(size = 2))) +
  scale_color_manual(values = combined_colors,
                     breaks = unique_serum_exposures, # Specify which legends to display
                     labels = unique_serum_exposures) 


```


Saving the relevant plots

```{r}
############################
# Save the map (.svg.tiff) #
############################
folder_name <- paste0("../results/antigenic_map_", 
                      table_info |>
                          pull(virus_type) , 
                      "_", Sys.Date())
##################################
# Add version_1
# Add version_2
# Add version_3
# Add version_4
# Add version_5
##################################
# Add version_1
# Add version_2
# Add version_3
# Add version_4
# Add version_5
##################################
# Add version_1
# Add version_2
# Add version_3
# Add version_4
# Add version_5
##################################
# Add version_1
# Add version_2
# Add version_3
# Add version_4
# Add version_5
##################################

make_dir(folder_name)

base_filename <- paste0("antigenic_map_", 
                        table_info |>
                          pull(virus_type), 
                        "_", Sys.Date())
write_tsv(dd,
            file = "../data/dd.tsv")

## JPG
ggsave(
  plot = ag_map_1,
  filename = paste0(base_filename, ".jpg"),
  path = folder_name,
  device = "jpg",
  width = 20,
  height = 12,
  units = "cm",
)
ggsave(
  plot = ag_map_2,
  filename = paste0(base_filename,"_label", ".jpg"),
  path = folder_name,
  device = "jpg",
  width = 20,
  height = 12,
  units = "cm",
)
ggsave(
  plot = ag_map_3,
  filename = paste0(base_filename,"_plain", ".jpg"),
  path = folder_name,
  device = "jpg",
  width = 20,
  height = 12,
  units = "cm",
)
ggsave(
  plot = ag_map_4,
  filename = paste0(base_filename,"_grouped", ".jpg"),
  path = folder_name,
  device = "jpg",
  width = 20,
  height = 12,
  units = "cm",
)
ggsave(
  plot = ag_map_5,
  filename = paste0(base_filename,"_grouped_label", ".jpg"),
  path = folder_name,
  device = "jpg",
  width = 20,
  height = 12,
  units = "cm",
)
ggsave(
  plot = ag_map_6,
  filename = paste0(base_filename,"_cluster", ".jpg"),
  path = folder_name,
  device = "jpg",
  width = 20,
  height = 12,
  units = "cm",
)
ggsave(
  plot = ag_map_7,
  filename = paste0(base_filename,"_grouped_cluster", ".jpg"),
  path = folder_name,
  device = "jpg",
  width = 20,
  height = 12,
  units = "cm",
)
## SVG
ggsave(
  plot = ag_map_1,
  filename = paste0(base_filename, ".svg"),
  path = folder_name,
  device = "svg",
  width = 20,
  height = 12,
  units = "cm",
)
ggsave(
  plot = ag_map_2,
  filename = paste0(base_filename,"_label", ".svg"),
  path = folder_name,
  device = "svg",
  width = 20,
  height = 12,
  units = "cm",
)
ggsave(
  plot = ag_map_3,
  filename = paste0(base_filename,"_plain", ".svg"),
  path = folder_name,
  device = "svg",
  width = 20,
  height = 12,
  units = "cm",
)
ggsave(
  plot = ag_map_4,
  filename = paste0(base_filename,"_grouped", ".svg"),
  path = folder_name,
  device = "svg",
  width = 20,
  height = 12,
  units = "cm",
)
ggsave(
  plot = ag_map_5,
  filename = paste0(base_filename,"_grouped_label", ".svg"),
  path = folder_name,
  device = "svg",
  width = 20,
  height = 12,
  units = "cm",
)
ggsave(
  plot = ag_map_6,
  filename = paste0(base_filename,"_cluster", ".svg"),
  path = folder_name,
  device = "svg",
  width = 20,
  height = 12,
  units = "cm",
)
ggsave(
  plot = ag_map_7,
  filename = paste0(base_filename,"_grouped_cluster", ".svg"),
  path = folder_name,
  device = "svg",
  width = 20,
  height = 12,
  units = "cm",
)
# Save the plot as TIFF
ggsave(
  plot = ag_map_1,
  filename = paste0(base_filename, ".tiff"),
  path = folder_name,
  device = "tiff",
  dpi = 300, # Set the desired resolution
  width = 20,
  height = 12,
  units = "cm",
)

ggsave(
  plot = ag_map_2,
  filename = paste0(base_filename,"_label", ".tiff"),
  path = folder_name,
  device = "tiff",
  dpi = 300, # Set the desired resolution
  width = 20,
  height = 12,
  units = "cm",
)
ggsave(
  plot = ag_map_3,
  filename = paste0(base_filename,"_plain", ".tiff"),
  path = folder_name,
  device = "tiff",
  dpi = 300, # Set the desired resolution
  width = 20,
  height = 12,
  units = "cm",
)
ggsave(
  plot = ag_map_4,
  filename = paste0(base_filename,"_grouped", ".tiff"),
  path = folder_name,
  device = "tiff",
  dpi = 300, # Set the desired resolution
  width = 20,
  height = 12,
  units = "cm",
)
ggsave(
  plot = ag_map_5,
  filename = paste0(base_filename,"_grouped_label", ".tiff"),
  path = folder_name,
  device = "tiff",
  dpi = 300, # Set the desired resolution
  width = 20,
  height = 12,
  units = "cm",
)
ggsave(
  plot = ag_map_6,
  filename = paste0(base_filename,"_cluster", ".tiff"),
  path = folder_name,
  device = "tiff",
  dpi = 300,
  width = 20,
  height = 12,
  units = "cm",
)
ggsave(
  plot = ag_map_7,
  filename = paste0(base_filename,"_grouped_cluster", ".tiff"),
  path = folder_name,
  device = "tiff",
  dpi = 300,
  width = 20,
  height = 12,
  units = "cm",
)
```

