---
title: "serum titer calculation"
format: html
editor: source
author: Magnus & Oliver
---

### Source functions

```{r}
source("../R/99_proj_func.R")
```

### Libraries:

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false

library("stringr")
library("dplyr")
library("tidyverse")
library("httr")
library("jsonlite")
library("R.utils")
```


### Load files:

```{r}
#name_prompt = readline(prompt = "State the exact name of the file : ");
#Something cool where it knows what to load and stuff

#Right now we do the primitive way
sera_y_titration_g2 <- read_csv2(file = "../_raw/H6N1cali_pig_sera_Y1_10_25_01.csv")
sera_x_titration_g4 <- read_csv2(file = "../_raw/H6N1cali_pig_sera_X1_10_25_01.csv")
```
### Data
```{r}
set_colnames_from_row <- function(tbl, row_number = 1) {
  # Check if the specified row number is within the number of rows in the table
  if(row_number > nrow(tbl) | row_number < 1) {
    stop("The specified row number is out of bounds.")
  }
  # Set column names from the specified row
  colnames(tbl) <- as.character(unlist(tbl[row_number, ]))
  #colnames(tbl) <- paste0("Col",as.character(unlist(tbl[row_number, ])))
  # Remove the row that was used for column names
  tbl <- tbl[-row_number, ]
  return(tbl)
}

#######################################
############  For one file ############
#######################################
df_sera_y <- sera_y_titration_g2[1:20, 1:13] |>
  slice_tail(n = 9) |>
  dplyr::select(-matches("user")) |>
  set_colnames_from_row(row_number = 1) |>
  mutate(across(everything(), as.numeric))

```


### 4PL model

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false

library("drc")
```

```{r}
# - 4PL model, you can use the LL.4() function also from the drc package.
# - Interpolate Unknowns from Standard Curve: After fitting the curve, you can use the predict() function to find the corresponding y-values (in your case, the antibody concentration) for your 50% virus cut-off value.

##########
##########
# Step 1 #
##########
# Remove Background
########## 
background <- lapply(df_sera_y[5:8,11], as.numeric) # Background
background <- mean(background[["VIRUS"]])

df_background <- fill(
  data.frame(
    matrix(background, 
           nrow = 8, 
           ncol = 12)), 
  everything()) |>
  mutate(across(everything(), as.numeric))

df_sera_y <- df_sera_y - df_background

##########
##########
# Step 2 #
##########
# Calc 50% virus cut-off
########## 
virus_cut_off_50 <- 0.5 * mean(
  as.numeric(df_sera_y[1:4, 
                       11])) 
##########
##########
# Step 3 #
##########
# Dilution vector
########## 
dilution <- c(30, 120, 480, 1920,            # 4-fold dilution
              7680, 30720, 122880, 491520)
log10_dilution <- log10(dilution)

##########
##########
# Step 4 #
##########
# Nonlinear Regression using 4PL model
########## 
# Use drm() function with LL.4()

sera_choosen <- "Y1"                          # CHOOSE HERE
response <- as.numeric(df_sera_y[[sera_choosen]])
model <- drm(
  response ~ log10_dilution, 
  data=df_sera_y, 
  fct=LL.4())                                 # 4PL model

##########
##########
# Step 5 #
##########
# Interpolate Unknowns from Standard Curve
########## 
# Use predict() to find corresponding antibody concentration for 50% cut-off value
predicted_log10_dilution <- predict(model, 
                                    newdata=data.frame(
                                      log10_dilution = virus_cut_off_50)
                                    , type="response")
predicted_dilution <- 10^predicted_log10_dilution


##########
##########
# Step 6 #
##########
# Convert to normal scale
########## 
# normal_dilution <- 10^log10_dilution

##########
##########
# Step 7 #
##########
# Determine Inhibition Titers
########## 
# Interpret titers based on normal scale

# inhibition_titers <- ED(model, 50, interval="confidence")

```

