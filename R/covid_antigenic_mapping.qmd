---
title: "CovidAntigenicData"
format: html
editor: visual
output-dir: "../doc"
---

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false


library("stringr")
library("dplyr")
library("tidyverse")
library("Racmacs")
library("RColorBrewer")
```

# Antigenic Cartography - COVID

Antigen names; H69775 (Wuhan), Alpha (B.1.1.7), Beta (B.1.351), Gamma (P.1), Delta B.1.617.2, Delta AY.33, Delta AY.4, Delta AY.4.2, Delta B.1.617.2 and E484K Omicron

Loading the data

```{r}
#| echo: false
#| message: false
#| output: false

titer_table <- read_csv2(file = "../_raw/ac-3.0-Rabbit sera with Omicron_25-01-2022.csv")
```

Functions that count the axis

```{r}
#| echo: false
#| message: false

print("The amount of virus strains are:")
#Count the number of virus strains
titer_table |> 
  select("...2") |> 
  slice(9:n()) |> 
  filter_all(any_vars(!is.na(.))) |> 
  nrow()


print("The amount of antigen sera are:")
#Count the number of antigen sera. Not really "tidyverse" but it works
titer_table |> 
  slice(6) |> 
  select(-c(1:5)) |> 
  as.list() |>
  map_lgl(~ !is.na(.)) |> 
  sum()

# Function to check if 80% of a column is empty
check_empty <- function(column) {
  empty_count <- sum(is.na(column) | column == "")
  return(empty_count >= 0.8 * length(column))
}

# Using tidyverse functions to check if 80% of each column is empty
#empty_columns <- titer_dirty %>%
#  map_lgl(check_empty)



```

Data wrangling

```{r}

#######################
### Serum ID string ###
#######################

serum_ids <- titer_table |>
  slice(6) |> # Select the row with Serum IDs
  dplyr::select(where(~ any(!is.na(.)))) |> #Remove NA
  unlist() |> # Flatten it to a vector 
  as.character()


set_colnames_from_row <- function(tbl, row_number = 1) {
  # Check if the specified row number is within the number of rows in the table
  if(row_number > nrow(tbl) | row_number < 1) {
    stop("The specified row number is out of bounds.")
  }
  # Set column names from the specified row
  colnames(tbl) <- as.character(unlist(tbl[row_number, ]))
  #colnames(tbl) <- paste0("Col",as.character(unlist(tbl[row_number, ])))
  
  # Remove the row that was used for column names
  tbl <- tbl[-row_number, ]
  
  return(tbl)
}

########################
#### Titer Cleaning ####
########################
titer_dirty <- titer_table |>
  # Remove first with meta data.
  slice(-(1:4)) |>
  # Remove coloumns that have no data. 
  # Function keeps columns with at least one value is not NA. 
  dplyr::select(where(~ any(!is.na(.)))) |> 
  t() |>
  as_tibble() |>
  set_colnames_from_row(row_number = 2)

names(titer_dirty)[1] <- "serum_passage"
names(titer_dirty)[2] <- "serum_id"
names(titer_dirty)[3] <- "serum_species"
clean_names <- map_chr(names(titer_dirty), ~ifelse(is.na(.x) | .x == "", paste0("col", which(names(titer_dirty) == .x)), .x))
unique_clean_names <- make.unique(clean_names)
names(titer_dirty) <- unique_clean_names

titer_clean <- titer_dirty |>
  slice(-c(1, 2, 3)) |>
  dplyr::select(-matches("col"), -"Antigen names") |>
  relocate(c("serum_passage","serum_species"), .after = "Omicron")

#######################
### Attribute Table ###
#######################
attr_table <- titer_table |>
  slice(-(1:4)) |>
  slice_head(n = 3) |>
  t() |>
  as_tibble() |>
  slice(-(1:4)) |>
  set_colnames_from_row(row_number = 1)

```

Antigenic mapping

```{r}
#Setting core options. Not sure what it does exactly but is needed
options(RacOptimizer.num_cores = 1)



#Getting data ready for mapping
titer_clean_values <- titer_clean |> 
  slice(-(1)) |> 
  as_tibble() |> 
  column_to_rownames(var = "serum_id") |> 
  dplyr::select(!(c("serum_passage", "serum_species"))) |> 
  mutate(across(everything(), ~replace_na(., "*"))) |> 
  t()



####TESTING####
str(titer_clean_values)
#View(titer_)

testtable <- matrix(2 ^ (1:6) * 10, 6, 4)
str(testtable)

####----####

#Getting the strain names
legend_names <- rownames(titer_clean_values)

# Create the acmap object, specifying the titer table
map <- acmap(
  titer_table = titer_clean_values
)

# Perform some optimization runs on the map object to try and determine a best map
map <- optimizeMap(
  map                     = map,
  number_of_dimensions    = 2,
  number_of_optimizations = 10000,
  minimum_column_basis    = "none"
)


#colours that might work
##myColors <- brewer.pal(9,"Set1")
##names(myColors) <- legend_names

#colours that do work
colours <- rainbow(10)
colours <- topo.colors(10)
agFill(map) <- colours


#Trying to create a legend. Dont know what to do with it
map_legend <- setLegend(map, legend_names, colours, style.bottom = "8px", style.right = "8px")

#view(map_legend,
#  show_group_legend = FALSE,
#  options = list(show.names = TRUE))

#Visualizing using the plot command.
plot(map_legend, 
     plot_labels = "antigens",
     #optimization_number = 10,
     grid.margin.col = "grey90",
     procrustes.col = "hotpink",
     show_error_lines = TRUE)

#Trying with ggplot #####THIS SECTION IS FOR MAGNUS AND HIS BEAUTIFUL PLOTS####



#Visualizing using the RacViewer with some set options. 
##RacViewer(
##  map_legend,
##  show_procrustes = FALSE,
##  show_group_legend = FALSE,
##  
##  #Deault options
##  options = list(show.names = TRUE,
##                 show.errorlines = FALSE,
##                 show.connectionlines = FALSE,
##                 show.titers = FALSE),
##  width = NULL,
##  height = NULL,
##  elementId = NULL)

#Trying to export the map to html
#view(map_legend, filename = "map_with_legend.html")


agGroups(map) <- factor(agFill(map))
srGroups(map) <- factor(srOutline(map))


view(
  map_legend,
  show_group_legend = FALSE
)

# Define the path to the 'results' directory relative to the 'R' directory
results_directory <- file.path(getwd(), "../results")

# Create a temporary file within the 'results' directory
tmp <- tempfile(tmpdir = results_directory, fileext = ".html")

# Extract just the file name, not the entire path
tmp_file_name <- basename(tmp)

# Use racmacs to export the file to the 'results' directory
export_viewer(map_legend, tmp, selfcontained = TRUE)

#View(tmp)
unlink(tmp)

```

2.  **Embed the HTML file using the correct Quarto syntax**:

After the R chunk (in the markdown part of your Quarto document, not inside any R code chunk), use the following syntax to embed the iframe:

::: panel
<iframe src="../results/fileb8836231d65.html" style="width:100%; height:600px; border:none;" title="antigenic map">

</iframe>
:::
