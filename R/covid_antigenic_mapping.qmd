---
title: "CovidAntigenicData"
format: html
editor: visual
output-dir: "../doc"
---

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false


library("stringr")
library("dplyr")
library("tidyverse")
library("Racmacs")
library("RColorBrewer")
library("sf")
library("viridis")
library("devtools")
# devtools::install_github("yulab-smu/ggacmap")
library(ggacmap)
```

# Antigenic Cartography - COVID

Antigen names; H69775 (Wuhan), Alpha (B.1.1.7), Beta (B.1.351), Gamma (P.1), Delta B.1.617.2, Delta AY.33, Delta AY.4, Delta AY.4.2, Delta B.1.617.2 and E484K Omicron

```{r}
#| echo: false
#| message: false
#| output: false

titer_table <- read_csv2(file = "../_raw/ac-3.0-Rabbit sera with Omicron_25-01-2022.csv")
```

```{r}
#| echo: false
#| message: false

#Functions that count the axis

print("The amount of virus strains are:")
#Count the number of virus strains
titer_table |> 
  select("...2") |> 
  slice(9:n()) |> 
  filter_all(any_vars(!is.na(.))) |> 
  nrow()


print("The amount of antigen sera are:")
#Count the number of antigen sera. Not really "tidyverse" but it works
titer_table |> 
  slice(6) |> 
  select(-c(1:5)) |> 
  as.list() |>
  map_lgl(~ !is.na(.)) |> 
  sum()

# Function to check if 80% of a column is empty
check_empty <- function(column) {
  empty_count <- sum(is.na(column) | column == "")
  return(empty_count >= 0.8 * length(column))
}

# Using tidyverse functions to check if 80% of each column is empty
#empty_columns <- titer_dirty %>%
#  map_lgl(check_empty)



```

## Data wrangling

```{r}
#| warning: false
#######################
### Serum ID string ###
#######################

serum_ids <- titer_table |>
  slice(6) |> # Select the row with Serum IDs
  dplyr::select(where(~ any(!is.na(.)))) |> #Remove NA
  unlist() |> # Flatten it to a vector 
  as.character()


set_colnames_from_row <- function(tbl, row_number = 1) {
  # Check if the specified row number is within the number of rows in the table
  if(row_number > nrow(tbl) | row_number < 1) {
    stop("The specified row number is out of bounds.")
  }
  # Set column names from the specified row
  colnames(tbl) <- as.character(unlist(tbl[row_number, ]))
  #colnames(tbl) <- paste0("Col",as.character(unlist(tbl[row_number, ])))
  
  # Remove the row that was used for column names
  tbl <- tbl[-row_number, ]
  
  return(tbl)
}

########################
#### Titer Cleaning ####
########################
titer_dirty <- titer_table |>
  # Remove first with meta data.
  slice(-(1:4)) |>
  # Remove coloumns that have no data. 
  # Function keeps columns with at least one value is not NA. 
  dplyr::select(where(~ any(!is.na(.)))) |> 
  t() |>
  as_tibble() |>
  set_colnames_from_row(row_number = 2)

names(titer_dirty)[1] <- "serum_passage"
names(titer_dirty)[2] <- "serum_id"
names(titer_dirty)[3] <- "serum_species"
clean_names <- map_chr(names(titer_dirty), ~ifelse(is.na(.x) | .x == "", paste0("col", which(names(titer_dirty) == .x)), .x))
unique_clean_names <- make.unique(clean_names)
names(titer_dirty) <- unique_clean_names

titer_clean <- titer_dirty |>
  slice(-c(1, 2, 3)) |>
  dplyr::select(-matches("col"), -"Antigen names") |>
  relocate(c("serum_passage","serum_species"), .after = "Omicron")


#Getting data ready for mapping
titer_clean <- titer_clean |> 
  slice(-(1)) |> 
  as_tibble() |> 
  column_to_rownames(var = "serum_id") |> 
  dplyr::select(!(c("serum_passage", "serum_species"))) |> 
  mutate(across(everything(), ~replace_na(., "*"))) |> 
  t()

#######################
### Attribute Table ###
#######################
attr_table <- titer_table |>
  slice(-(1:4)) |>
  slice_head(n = 3) |>
  t() |>
  as_tibble() |>
  slice(-(1:4)) |>
  set_colnames_from_row(row_number = 1)


# Group 1 - 2, 11, 18, 21, 40, 43, 46, 56
# Group 2 - 7, 19, 29, 32, 37, 39, 45, 59
# Group 3 - 1, 15, 25, 33, 35, 38, 44, 48
# Group 4a - 16, 31, 41, 54
# Group 4b -9, 12, 28, 34
```

## Visualization with ggacmap

```{r}
options(RacOptimizer.num_cores = 1)

acmap_obj <- acmap(
  titer_table = titer_clean
)
# Perform some optimization runs on the map object to try and determine a best map
acmap_obj <- optimizeMap(
  map                     = acmap_obj,
  number_of_dimensions    = 2,
  number_of_optimizations = 10000,
  minimum_column_basis    = "none"
)


##Saving the acmap_obj
# Define the path to the 'results' directory relative to the 'R' directory
results_directory <- file.path(getwd(), "../results")
# Create the directory if it doesn't exist
if(!dir.exists(results_directory)) {
  dir.create(results_directory, recursive = TRUE)
}

# Create a temporary file within the 'results' directory
tmp <- tempfile(tmpdir = results_directory, fileext = ".ace")

save.acmap(acmap_obj, 
     file = tmp)


########################
covid_map <- read.acmap(file = tmp)

########################
# Step 1: Extract Coordinates
ag_coords <- agCoords(covid_map)  # Antigen coordinates
sr_coords <- srCoords(covid_map)  # Serum coordinates

# Step 2: Extract Fill Colors
colours <- rainbow(10)
agFill(covid_map) <- colours
ag_fill <- agFill(covid_map)  # Antigen fill colors

sr_fill <- rep('grey', length(srCoords(covid_map)))  # Assuming sera fill color is grey


# Step 3: Combine into Data Frame
# Combine antigen and serum data
dd <- rbind(
  data.frame(
    x = ag_coords[,1], 
    y = ag_coords[,2], 
    fill = ag_fill, 
    type = 'AG'),
  data.frame(
    x = sr_coords[,1], 
    y = sr_coords[,2], 
    fill = sr_fill, 
    type = 'SR')
)

antigenic_group <- covid_map$antigens
antigenic_group <- sapply(antigenic_group, function(x) x$name)

dd <- dd |>
  mutate(antigenic_group = rownames(dd))

###########################
ggplot(dd) +
  geom_point(aes(x = x, 
                 y = y, 
                 color = antigenic_group, 
                 shape = type, 
                 size = type)) +
  scale_shape_manual(values = c("AG" = 16, 
                                "SR" = 0)) +  # Adjusted SR to 1 for hollow squares
  scale_size_manual(values = c("AG" = 6, 
                               "SR" = 2)) +  # Example sizes, adjust as needed
  scale_color_manual(values = dd |>
                       filter(type == "AG") |>
                       pull(fill) |>
                       setNames(dd |> 
                                  filter(type == "AG") |> 
                                  pull(antigenic_group))) +
  theme_minimal() +
  labs(title = "Antigenic map of SARS-CoV-2 variants",
       subtitle = "Neutralization titers across variants analyzed via pseudotype virus assay",
       x = "MSD-1", 
       y = "MSD-2",
       color = "Antigenic group",
       caption = "Wilks et al., 2023") +
  guides(color = guide_legend(override.aes = list(size = 5)),
         shape = "none",
         size = "none") + # Hide the size legend if it's not meaningful
  theme(
    axis.text.x = element_blank(), 
    axis.text.y = element_blank(),
    plot.background = element_blank(), # Remove plot background
    panel.background = element_blank(), # Remove panel background
    # panel.grid.major = element_blank(), # Remove grid lines
    panel.grid.minor = element_blank(),
    panel.border = element_rect(colour = "darkgrey", 
                                fill=NA, 
                                size=1.5),
    plot.caption = element_text(hjust = 1, vjust = 1, margin = margin(t = -10, unit = "pt"), size = 12, color = "darkgrey", face = "italic"),
    legend.box.spacing = unit(10, "pt"),
    plot.margin = margin(t = 20, 
                         r = 10, 
                         b = 5, 
                         l = 15, 
                         unit = "pt"),
    plot.subtitle = element_text(margin = margin(t = 2,
                                                 b = 10, 
                                                 unit = "pt")),
    plot.title = element_text(face = "bold"),
    plot.caption.position = "plot",
    plot.title.position = "plot",
    legend.position = "right"
    ) 

###########################

library("viridis")

# Step 1: Generate colors
unique_AG <- dd |> filter(type == "AG") |> pull(antigenic_group) |> unique()
colors_for_AG <- setNames(viridis::viridis(length(unique_AG), option = "turbo"), unique_AG)

# Step 2: Plot
ggplot(dd) +
   geom_point(data = filter(dd, 
                            type == "AG"), 
             aes(x = x, 
                 y = y, 
                 fill = antigenic_group), 
             shape = 21, 
             size = 6, 
             color = "black") +
  geom_point(data = filter(dd, 
                           type == "SR"), 
             aes(x = x, 
                 y = y, 
                 shape = type), 
             size = 2,
             shape = 0,
             color = "darkgrey") +
  scale_fill_manual(values = colors_for_AG) +
  theme_minimal() +
  labs(title = "Antigenic map of SARS-CoV-2 variants",
       subtitle = "Neutralization titers across variants analyzed via pseudotype virus assay",
       x = "MSD-1", 
       y = "MSD-2",
       fill = "Antigenic group",
       caption = "Wilks et al., 2023") +
  guides(fill = guide_legend(override.aes = list(size = 5)),
         shape = "none",
         size = "none") + # Hide the size legend if it's not meaningful
  theme(
    axis.text.x = element_blank(), 
    axis.text.y = element_blank(),
    plot.background = element_blank(), # Remove plot background
    panel.background = element_blank(), # Remove panel background
    # panel.grid.major = element_blank(), # Remove grid lines
    panel.grid.minor = element_blank(),
    panel.border = element_rect(colour = "darkgrey", 
                                fill=NA, 
                                size=1.5),
    plot.caption = element_text(hjust = 1, vjust = 1, margin = margin(t = -10, unit = "pt"), size = 12, color = "darkgrey", face = "italic"),
    legend.box.spacing = unit(10, "pt"),
    plot.margin = margin(t = 20, 
                         r = 10, 
                         b = 5, 
                         l = 15, 
                         unit = "pt"),
    plot.subtitle = element_text(margin = margin(t = 2,
                                                 b = 10, 
                                                 unit = "pt")),
    plot.title = element_text(face = "bold"),
    plot.caption.position = "plot",
    plot.title.position = "plot",
    legend.position = "right"
    )
```

## Visualization (attempt) with ggplot2

```{r}
### GGPLOT ATTEMPT ###
options(RacOptimizer.num_cores = 1)

acmap_obj <- acmap(
  titer_table = titer_clean
)
View(acmap_obj)
# Perform some optimization runs on the map object to try and determine a best map
acmap_obj <- optimizeMap(
  map                     = acmap_obj,
  number_of_dimensions    = 2,
  number_of_optimizations = 10000,
  minimum_column_basis    = "none"
)

colours <- rainbow(10)
#colours <- topo.colors(10)
agFill(acmap_obj) <- colours

antigenic_group <- acmap_obj$antigens
antigenic_group <- sapply(antigenic_group, function(x) x$name)

legend_names <- rownames(titer_clean)
map_legend <- setLegend(acmap_obj, legend_names, colours, style.bottom = "8px", style.right = "8px")

ggplot(data = acmap_obj,
       map_legend,
       # plot_labels = "antigenic_group",
       # ggplot2::scale_fill_identity(),
       mapping = NULL,
       optimization_number = 1,
       xlim = NULL,
       ylim = NULL,
       plot_ags = TRUE,
       plot_sr = TRUE,
       plot_blobs = TRUE,
       plot_hemisphering = TRUE,
       show_procrustes = TRUE,
       show_error_lines = FALSE,
       plot_stress = FALSE,
       indicate_outliers = "arrowheads",
       grid.col = "grey90",
       grid.lwd = 0.5,
       grid.margin.col = "grey50",
       grid.margin.lwd = 0.5,
       fill.alpha = 0.8,
       outline.alpha = 0.8,
       padding = 1,
       arrow_angle = 25,
       arrow_length = 0.2,
       margins = rep(0.5, 4)) +
  labs(title = "Antigenic Mapping of COVID",
       subtitle = "Difference between COVID variants by dimensional scaling",
       x = "Dimension 1",
       y = "Dimension 2",
       fill = "Variants") +
  theme(
    axis.title.x = element_text(color = "black"),
    axis.title.y = element_text(color = "black"))


```

## Visualization with Racmacs viewer

```{r}
#Setting core options. Not sure what it does exactly but is needed
options(RacOptimizer.num_cores = 1)

################
####TESTING####
# str(titer_clean)
#View(titer_)
#testtable <- matrix(2 ^ (1:6) * 10, 6, 4)
#str(testtable)
######----######
################

#Getting the strain names
legend_names <- rownames(titer_clean)


# Create the acmap object, specifying the titer table
map <- acmap(
  titer_table = titer_clean
)

# Perform some optimization runs on the map object to try and determine a best map
map <- optimizeMap(
  map                     = map,
  number_of_dimensions    = 2,
  number_of_optimizations = 10000,
  minimum_column_basis    = "none"
)


#colours that might work
##myColors <- brewer.pal(9,"Set1")
##names(myColors) <- legend_names

#colours that do work
colours <- rainbow(10)
colours <- topo.colors(10)
agFill(map) <- colours


#Trying to create a legend. Dont know what to do with it
map_legend <- setLegend(map, legend_names, colours, style.bottom = "8px", style.right = "8px")

#view(map_legend,
#  show_group_legend = FALSE,
#  options = list(show.names = TRUE))

#Visualizing using the plot command.
plot(map_legend, 
     plot_labels = "antigens",
     #optimization_number = 10,
     grid.margin.col = "grey90",
     procrustes.col = "hotpink",
     show_error_lines = FALSE)

#Trying with ggplot #####THIS SECTION IS FOR MAGNUS AND HIS BEAUTIFUL PLOTS####



#Visualizing using the RacViewer with some set options. 
##RacViewer(
##  map_legend,
##  show_procrustes = FALSE,
##  show_group_legend = FALSE,
##  
##  #Deault options
##  options = list(show.names = TRUE,
##                 show.errorlines = FALSE,
##                 show.connectionlines = FALSE,
##                 show.titers = FALSE),
##  width = NULL,
##  height = NULL,
##  elementId = NULL)

#Trying to export the map to html
#view(map_legend, filename = "map_with_legend.html")


agGroups(map) <- factor(agFill(map))
srGroups(map) <- factor(srOutline(map))


view(
  map_legend,
  show_group_legend = FALSE
)

# Define the path to the 'results' directory relative to the 'R' directory
results_directory <- file.path(getwd(), "../results")

# Create a temporary file within the 'results' directory
tmp <- tempfile(tmpdir = results_directory, fileext = ".html")

# Extract just the file name, not the entire path
tmp_file_name <- basename(tmp)

# Use racmacs to export the file to the 'results' directory
export_viewer(map_legend, tmp, selfcontained = TRUE)

#View(tmp)
unlink(tmp)

```
