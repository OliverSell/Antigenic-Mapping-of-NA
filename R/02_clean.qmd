## Source functions

```{r}
source("../R/99_proj_func.R")
```

## Libraries:

```{r}
#| message: false
library("tidyverse")
library("dplyr")
library("Racmacs")
```

## Load data

```{r}
titer_table_covid <- read_tsv("../data/titer_table.tsv.gz")
```

## Data wrangling

```{r}

########################
#### Titer Cleaning ####
########################
titer_dirty <- titer_table_covid |>
  # Remove first with meta data.
  slice(-(1:8)) |>
  # Remove coloumns that have no data. 
  # Function keeps columns with at least one value is not NA. 
  dplyr::select(where(~ any(!is.na(.)))) |> 
  set_colnames_from_row(row_number = 1) |> 
  t() |> 
  as_tibble(rownames = NA) |> 
  slice(-(1:2)) |> 
  select(where(~ !(all(is.na(.)) | all(. == "")))) |> 
  set_colnames_from_row(row_number = 1) |> 
  select(-1) |> 
  as.data.frame()

#Fetches the names of the sera
sera_names <- titer_table_covid |>
  slice(-(1:8)) |>
  dplyr::select(where(~ any(!is.na(.)))) |> 
  head(1) |> 
  select(-(1:3)) |> 
  as_vector()

#Adds sera names
row.names(titer_dirty) <- sera_names

titer_clean <- t(titer_dirty)

#Getting data ready for mapping
titer_clean <- titer_clean |> 
  as.data.frame() |> 
  mutate(across(everything(), ~replace_na(.x, "*")))

#Defining the amount of sera and antigen
antigen_sera_n <- ncol(titer_clean)
virus_strains_n <- nrow(titer_clean)


#######################
### Attribute Table ###
#######################
attr_table <- titer_table_covid |>
  slice(-(1:7)) |> 
  slice_head(n = 2) |> 
  t() |> 
  as_tibble() |> 
  slice(-(1:4)) |> 
  set_colnames_from_row(row_number = 1) |> 
  slice_head(n = antigen_sera_n) |> 
  #Removing semicolon from names
  rename_with( ~ gsub(":", "", .x))

## Table information
table_info <- tibble(
  virus_type = as.character(titer_table_covid[2, 7]),
  species = as.character(titer_table_covid[2, 9]),
  viral_protein = as.character(titer_table_covid[4, 7]),
  assay_type = as.character(titer_table_covid[4, 9])
)


```

## Testing if loading done correctly

```{r}
options(RacOptimizer.num_cores = 1)

acmap_obj <- acmap(
  titer_table = titer_clean
)
# Perform some optimization runs on the map object to try and determine a best map
acmap_obj <- optimizeMap(
  map                     = acmap_obj,
  number_of_dimensions    = 2,
  number_of_optimizations = 10000,
  minimum_column_basis    = "none"
)

plot(acmap_obj)
```

Saving the relevant values

```{r}

```

