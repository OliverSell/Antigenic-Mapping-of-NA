---
title: "CovidAntigenicData"
format: html
editor: visual
---

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false

library("stringr")
library("dplyr")
library("tidyverse")
library("Racmacs")
library("RColorBrewer")
```

# Antigenic Cartography - COVID

Antigen names; H69775 (wuhan), Alpha (B.1.1.7), Beta (B.1.351), Gamma (P.1), Delta B.1.617.2, Delta AY.33, Delta AY.4, Delta AY.4.2, Delta B.1.617.2 and E484K Omicron

Einstein

```{r}

titer_table <- read_csv2(file = "../_raw/ac-3.0-Rabbit sera with Omicron_25-01-2022.csv")

titer_table <- titer_table |> as_tibble()
View(dirty_titer)

#Count the number of virus strains
titer_table |> 
  select("...2") |> 
  slice(9:n()) |> 
  filter_all(any_vars(!is.na(.))) |> 
  nrow()

#Count the number of antigen sera. Not really "tidyverse" but it works
titer_table |> 
  slice(6) |> 
  select(-c(1:5)) |> 
  as.list() |>
  map_lgl(~ !is.na(.)) |> 
  sum()



# Function to check if 80% of a column is empty
check_empty <- function(column) {
  empty_count <- sum(is.na(column) | column == "")
  return(empty_count >= 0.8 * length(column))
}

# Using tidyverse functions to check if 80% of each column is empty
empty_columns <- dirty_titer %>%
  map_lgl(check_empty)

print(empty_columns)


```

Magnus er ret sej

```{r}
titer_table <- read_csv2(file = "../_raw/ac-3.0-Rabbit sera with Omicron_25-01-2022.csv")



#######################
### Serum ID string ###
#######################

serum_ids <- titer_table |>
  slice(6) |> # Select the row with Serum IDs
  select(where(~ any(!is.na(.)))) |> #Remove NA
  unlist() |> # Flatten it to a vector 
  as.character()


set_colnames_from_row <- function(tbl, row_number = 1) {
  # Check if the specified row number is within the number of rows in the table
  if(row_number > nrow(tbl) | row_number < 1) {
    stop("The specified row number is out of bounds.")
  }
  # Set column names from the specified row
  colnames(tbl) <- as.character(unlist(tbl[row_number, ]))
  #colnames(tbl) <- paste0("Col",as.character(unlist(tbl[row_number, ])))
  
  # Remove the row that was used for column names
  tbl <- tbl[-row_number, ]
  
  return(tbl)
}

########################
#### Titer Cleaning ####
########################
titer_dirty <- titer_table |>
  # Remove first with meta data.
  slice(-(1:4)) |>
  # Remove coloumns that have no data. 
  # Function keeps columns with at least one value is not NA. 
  select(where(~ any(!is.na(.)))) |> 
  t() |>
  as_tibble() |>
  set_colnames_from_row(row_number = 2)

names(titer_dirty)[1] <- "serum_passage"
names(titer_dirty)[2] <- "serum_id"
names(titer_dirty)[3] <- "serum_species"
clean_names <- map_chr(names(titer_dirty), ~ifelse(is.na(.x) | .x == "", paste0("col", which(names(titer_dirty) == .x)), .x))
unique_clean_names <- make.unique(clean_names)
names(titer_dirty) <- unique_clean_names

titer_clean <- titer_dirty |>
  slice(-c(1, 2, 3)) |>
  select(-matches("col"), -"Antigen names") |>
  relocate(c("serum_passage","serum_species"), .after = "Omicron")

"""
clean_and_unique_names <- function(tbl) {
  # Generate valid column names to replace NA or "" and ensure uniqueness
  valid_col_names <- make.names(names(tbl), unique = TRUE)
  # Prefix with "Col" and ensure unique naming
  valid_col_names <- ifelse(valid_col_names == "NA" | 
                              valid_col_names == "", 
                            paste0("col", seq_along(valid_col_names)),
                            valid_col_names)
  valid_col_names <- make.unique(valid_col_names)
  names(tbl) <- valid_col_names
  return(tbl)
}
# Define a function to set column names from a specific row, replacing NA values
set_colnames_from_row <- function(tbl, row_number = 1) {
  if (row_number > nrow(tbl) || row_number < 1) {
    stop("The specified row number is out of bounds.")
  }
  
  # Extract the names from the specified row, replacing NA values with a placeholder
  new_names <- as.character(unlist(tbl[row_number, ]))
  new_names[is.na(new_names)] <- paste0("col", which(is.na(new_names)))
  
  # Ensure the new names are unique to avoid duplicate column names
  unique_new_names <- make.unique(new_names)
  
  # Set the new, unique names as column names
  colnames(tbl) <- unique_new_names
  
  # Remove the row that was used for column names
  tbl <- tbl[-row_number, ]
  
  return(tbl)
}

# Adjusted pipeline using the updated function
titer_dirty <- titer_table %>%
  # Remove first rows with metadata.
  slice(-(1:4)) %>%
  t() %>%
  as_tibble() %>%
  clean_and_unique_names() %>%
  {set_colnames_from_row(., 2)} %>%
  rename(serum_passage = col1, serum_id = col2, serum_species = col3) %>%
  slice(-c(1, 2, 3, 4)) %>%
  # Use select() with everything() to bypass the issue if Antigen_names does not exist
  select(-matches("^col\\d+$"), dplyr::everything()) %>%
  # Conditionally remove "Antigen_names" if it exists
  {if ("Antigen names" %in% colnames(.)) select(., -"Antigen names") else .} %>%
  # Remove empty coloumns
  select(-matches("col")) |>
  relocate(c("serum_passage","serum_species"), .after = "Omicron") |>
  # Transpose and convert to a tibble, if necessary
  as_tibble()
"""

#######################
### Attribute Table ###
#######################
attr_table <- titer_table |>
  slice(-(1:4)) |>
  slice_head(n = 3) |>
  t() |>
  as_tibble() |>
  slice(-(1:4)) |>
  set_colnames_from_row(row_number = 1)

```

Antigenic mapping

```{r}
#Setting core options. Not sure what it does exactly but is needed
options(RacOptimizer.num_cores = 1)

#Getting the strain names
sera_names <- colnames(titer_clean)
legend_names <- sera_names[-1]

#Getting data ready for mapping
titer_clean_values <- titer_clean |> 
  slice(-(1)) |> 
  as.tibble() |> 
  column_to_rownames(var = "serum_id") |> 
  select(!(c("serum_passage", "serum_species"))) |> 
  mutate(across(everything(), ~replace_na(., "*"))) |> 
  t()
View(titer_clean_values)


# Create the acmap object, specifying the titer table
map <- acmap(
  titer_table = titer_clean_values
)

# Perform some optimization runs on the map object to try and determine a best map
map <- optimizeMap(
  map                     = map,
  number_of_dimensions    = 2,
  number_of_optimizations = 10000,
  minimum_column_basis    = "none"
)


#colours that might work
##myColors <- brewer.pal(9,"Set1")
##names(myColors) <- legend_names

#colours that do work
##colours <- rainbow(10)
colours <- topo.colors(10)
agFill(map) <- colours


#Trying to create a legend. Dont know what to do with it
legend_map <- setLegend(map, legend_names, colours)




#Visualizing using the plot command.
plot(legend_map, 
     plot_labels = "antigens",
     optimization_number = 10,
     grid.margin.col = "grey90",
     procrustes.col = "black")

#+ scale_color_manual(values = c("Omircron" = "red"))

#Visualizing using the RacViewer with some set options. 
RacViewer(
  map,
  show_procrustes = FALSE,
  show_group_legend = FALSE,
  
  #Deault options
  options = list(show.names = TRUE,
                 show.errorlines = FALSE,
                 show.connectionlines = FALSE,
                 show.titers = FALSE),
  width = NULL,
  height = NULL,
  elementId = NULL)

#Trying to export the map to html
view(legend_map, filename = "map_with_legend.html")

```
