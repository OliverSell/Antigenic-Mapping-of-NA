---
title: "CovidAntigenicData"
format: html
editor: visual
---

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false

library("stringr")
library("dplyr")
library("tidyverse")
```

# Antigenic Cartography - COVID

Antigen names; H69775 (wuhan), Alpha (B.1.1.7), Beta (B.1.351), Gamma (P.1), Delta B.1.617.2, Delta AY.33, Delta AY.4, Delta AY.4.2, Delta B.1.617.2 and E484K Omicron

Einstein

```{r}


TiterTable <- read_csv2(file = "../_raw/ac-3.0-Rabbit sera with Omicron_25-01-2022.csv")


dirty_titer <- TiterTable |> as_tibble()
View(dirty_titer)

#Count the number of virus strains
dirty_titer |> 
  select("...2") |> 
  slice(9:n()) |> 
  filter_all(any_vars(!is.na(.))) |> 
  nrow()

#Count the number of antigen sera. Not really "tidyverse" but it works
dirty_titer |> 
  slice(6) |> 
  select(-c(1:5)) |> 
  as.list() |>
  map_lgl(~ !is.na(.)) |> 
  sum()



# Function to check if 80% of a column is empty
check_empty <- function(column) {
  empty_count <- sum(is.na(column) | column == "")
  return(empty_count >= 0.8 * length(column))
}

# Using tidyverse functions to check if 80% of each column is empty
empty_columns <- dirty_titer %>%
  map_lgl(check_empty)

print(empty_columns)





```

Magnus

```{r}
titer_table <- read_csv2(file = "../_raw/ac-3.0-Rabbit sera with Omicron_25-01-2022.csv")

set_colnames_from_row <- function(tbl, row_number = 1) {
  # Check if the specified row number is within the number of rows in the table
  if(row_number > nrow(tbl) | row_number < 1) {
    stop("The specified row number is out of bounds.")
  }
  # Set column names from the specified row
  colnames(tbl) <- as.character(unlist(tbl[row_number, ]))
  
  # Remove the row that was used for column names
  tbl <- tbl[-row_number, ]
  
  return(tbl)
}
#######################
### Attribute Table ###
#######################
attr_table <- titer_table |>
  slice(-(1:4)) |>
  slice_head(n = 3) |>
  t() |>
  as_tibble() |>
  slice(-(1:4)) |>
  set_colnames_from_row(row_number = 1)

#######################
### Serum ID string ###
#######################

serum_ids <- titer_table |>
  slice(6) |> # Select the row with Serum IDs
  select(where(~ any(!is.na(.)))) |> #Remove NA
  unlist() |> # Flatten it to a vector 
  as.character()


########################
#### Titer Cleaning ####
########################
titer_dirty <- titer_table |>
  # Remove first with meta data.
  slice(-(1:4)) |>
  # Remove coloumns that have no data. 
  # Function keeps columns with at least one value is not NA. 
  select(where(~ any(!is.na(.)))) |> 
  as_tibble() |> 
  t() |>
  as_tibble() |>
  set_colnames_from_row(row_number = 2)

names(titer_dirty)[1] <- "serum_passages"
names(titer_dirty)[2] <- "serum_id"
names(titer_dirty)[3] <- "serum_species"

titer_dirty <- titer_dirty[-c(1,3)]  
```
